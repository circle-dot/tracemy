/* Copyright (c) 2014 Nordic Semiconductor. All Rights Reserved.
 *
 * The information contained herein is property of Nordic Semiconductor ASA.
 * Terms and conditions of usage are described in detail in NORDIC
 * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
 *
 * Licensees are granted free, non-transferable use of the information. NO
 * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
 * the file.
 *
 */

/** @file timer_blinky.c (changed by pcbreflux)
 * @brief Blinky Example Application main file.
 *
 */
#include <stdlib.h>
#include "nrf_delay.h"
#include "nrf_gpio.h"
#include "nrf_drv_clock.h"
#include "app_error.h"
#include "app_timer.h"
#include "ble_stack.h"
#include "nrf_drv_rtc.h"

// see nrf_drv_config.h for defining TIMER1
// Softdevice S110, S120, S130 blocks TIMER0

const uint32_t led_pin1 = 10;
const nrf_drv_rtc_t rtc1 = NRF_DRV_RTC_INSTANCE(1);
/** @brief Function initialization and configuration of GPIO.
 */
static void gpio_config(void)
{
    // Configure LED-pin as outputs and clear.
    nrf_gpio_cfg_output(led_pin1);
    nrf_gpio_pin_clear(led_pin1);
}

/** @brief Function for timer events.
 */
// static void timer1_handler(nrf_timer_event_t event_type, void *p_context)
// {
//     //    uint32_t err_code;

//     if (event_type == NRF_TIMER_EVENT_COMPARE0)
//     { // Interrupt from COMPARE0 event.
//         nrf_gpio_pin_toggle(led_pin1);
//     }
// }

static void rtc1_handler(nrf_drv_rtc_int_type_t int_type)
{
    //    uint32_t err_code;

    if (int_type == NRF_DRV_RTC_INT_COMPARE0)
    { // Interrupt from COMPARE0 event.
        nrf_gpio_pin_toggle(led_pin1);
        nrf_drv_rtc_int_enable(&rtc1, RTC_CHANNEL_INT_MASK(0));
        nrf_drv_rtc_counter_clear(&rtc1);
    }
    else if (int_type == NRF_DRV_RTC_INT_TICK)
    { // Tick off
        nrf_gpio_pin_toggle(led_pin1);
    }
}

/** @brief Function starting the HFCLK oscillator.
 */
static void lfclk_config(void)
{
    ret_code_t err_code = nrf_drv_clock_init();
    APP_ERROR_CHECK(err_code);

    nrf_drv_clock_lfclk_request(NULL);
}

/** @brief Function initialization and configuration of timer driver instance.
 */
static void timer_config(void)
{
    uint32_t err_code;

    // Initialize RTC instance
    err_code = nrf_drv_rtc_init(&rtc1, NULL, rtc1_handler);
    APP_ERROR_CHECK(err_code);

    // Disable tick event & interrupt
    nrf_drv_rtc_tick_enable(&rtc1, false);

    // Set compare channel 0 to trigger interrupt after RTC1_CC_VALUE*125ms
    err_code = nrf_drv_rtc_cc_set(&rtc1, 0, 10 * 60 * RTC1_CONFIG_FREQUENCY, true);
    APP_ERROR_CHECK(err_code);

    APP_ERROR_CHECK(err_code);

    // Power on RTC instance
    nrf_drv_rtc_enable(&rtc1);
}

/**
 * @brief Function for application main entry.
 */
int main(void)
{

    // setup
    init_ble();
    gpio_config();
    // hfclk_config();
    lfclk_config();
    timer_config();

    // loop
    while (true)
    {
        // Enter System ON sleep mode
        __WFE();
        // Make sure any pending events are cleared
        __SEV();
        __WFE();
    }
}

/** @} */
